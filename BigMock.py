# preprocess.py
# convert headers to google mock v1
# jonCastillo July 23 2016

import sys
import os
import re
import collections
import datetime
import StringIO

from Rules import Rule_MainBlock
from Rules import Rule_ClassBlock
from Rules import Rule_EnumBlock
from Rules import Rule_MethodBlock

from Utilities.RemoveComments import remove_comments
from Utilities.RemoveLineContinuation import removeLineContinuation
from RegexPatterns.Regex_Hpp import *
from LexerDataStructures.LexerStack import Stack
from LexerDataStructures.LexerStack import leveltype

def main():
     if len(sys.argv) is not 2:
         print "Please provide source header to process."
         print "example:"
         print (sys.argv)[0] + " c:\sources\source.hpp"
         return
     else:
         filename = (sys.argv)[1]
         if not os.path.isfile(filename):
             print "not a file!"
             return

         code_w_comments = open(filename).read()
         code_wo_comments  = remove_comments(code_w_comments)
         code_wo_LineContinuation = removeLineContinuation(code_wo_comments)
         processHeader(filename, code_wo_LineContinuation)
         return

def printHeader(filename, basename, fwrite):
     fwrite.write( "/****************************************************************************************************/\n" )
     fwrite.write( ("/* " + basename).ljust(100) + "*/\n" )
     fwrite.write( "/****************************************************************************************************/\n" )
     fwrite.write( ("/* This file was generated by convert_to_mock.py").ljust(100) +"*/\n" )
     fwrite.write( ("/* Mocked from: " + filename).ljust(100) + "*/\n" )
     fwrite.write( ("/* author:    jonathan.castillo@continental-corporation.com").ljust(100)+"*/\n" )
     fwrite.write( ("/* generated: " + datetime.datetime.now().strftime('%d %b %Y, %H:%M')).ljust(100) +"*/\n" )
     fwrite.write( "/****************************************************************************************************/\n" )

def processHeader(filename, code_wo_comments):
    basename = os.path.basename(filename)
    fwrite = open(".\\"+basename,'w')

    printHeader(filename, basename ,fwrite)

    mystack = Stack()
    mystack.push(leveltype.type_root)

    nextindex = 0
    result = True
    strlen = len(code_wo_comments)

    while (nextindex < strlen):
        if mystack.parent() == leveltype.type_root:
            result, nextindex = Rule_MainBlock.seekEntity(code_wo_comments, nextindex ,mystack)
        elif mystack.parent() == leveltype.type_namespace:
            result, nextindex = Rule_MainBlock.seekEntity(code_wo_comments, nextindex ,mystack)
        elif mystack.parent() == leveltype.type_class:
            result, nextindex = Rule_ClassBlock.seekEntity(code_wo_comments, nextindex ,mystack)
        elif mystack.parent() == leveltype.type_struct:
            result, nextindex = Rule_ClassBlock.seekEntity(code_wo_comments, nextindex ,mystack)
        elif mystack.parent() == leveltype.type_method:
            result, nextindex = Rule_MethodBlock.seekEntity(code_wo_comments, nextindex ,mystack)
        elif mystack.parent() == leveltype.type_enum:
            result, nextindex = Rule_MethodBlock.seekEntity(code_wo_comments, nextindex ,mystack)
        else:
            print ("not root:" + str(mystack.parent()))

if __name__ == '__main__':
    main()
