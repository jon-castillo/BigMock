/***************************************************************************
*================== Copyright by Continental Automotive GmbH ===============
****************************************************************************
* Title        : WFC_Widget.hpp
*
* Description  : Class HMI::WFC::Widget
*
* Environment  : WOSEK Simulation / OSEK on JCP2011
*
* Responsible  : Rishi Khaneja
*
* Guidelines   : SMK 4.6
*
* Template name: OOLite Codefile, Revision 1.0
*
* CASE-Tool    : Together Architect, Version 1.1
*
* $Log $
****************************************************************************/

#ifndef WFC_WIDGET_HPP
#define WFC_WIDGET_HPP

/* Internal Headers */
#include "WFC1CI.hpp"
#include "WFC_WidgetHelper.hpp"

/* External Headers */
#include "HMI_CI.h"
#include "HMI_CT.h"
#include "WRS_VisualTypesIDs.hpp"
#include "WCS_Message.hpp"
#include "WRS_DisplayControllerGetter.hpp"
#include "autil_extend.hpp"

/* CIA headers */
#include "AVITREM_Window.hpp"
#include "AVITREM_AbstractPainter.hpp"

/**
* A macro to help declare paint instance getters in derived widgets
* Input: associated paint class
*/
#define DECLARE_PAINTER(painter_type)   virtual painter_type *poGetPainter() const override { return (painter_type *) Widget::poGetPainter(); }


namespace HMI
{

    namespace WSMS
    {
        class ControllerStrategy;
    } /* WSMS */

    namespace WMMS
    {
        class Allocator;
    } /* WMMS */

#if HMI_TREEDEBUGGER == On

    namespace WAS
    {
        struct WidgetDescription;
    } /* WAS */

#endif /* HMI_TREEDEBUGGER == On */

    namespace WFC
    {

        class WarningWidget;

        /**
        ** Widget defines generic widget properties and mechanisms, and thus,
        *  all other widgets must derive from it directly or indirectly.
        ** Widget defines the following base properties:
        * 1. Index in WidgetHelper array
        * 2. Window ID
        * 3. FinalHook ID
        * 4. Attributes: Focusable, Focused, Visible, Enable, DoUpdate, Focused,
        *                CommonWidget, HasFirstAPIUpdate, HasFirstTreeBuildDone
        * 5. Window properties: PosX, PosY, PosZ, Width, Height, Transparency
        ** Getter/Setter methods for these properties are provided here.
        ** The generic message handling and drawing methods are also provided here.
        ** Moreover, widget or any derived class of widget allow logical grouping
        *  some widgets as children. Besides having a window space allocated to it,
        *  which is shared and drawn on by its children, Widget does not have any
        *  visuals of its own.
        ** Methods for adding or accessing children widgets are provided.
        *
        * @stereotype polymophic, noncopyable
        */
        class Widget : public AVITREM::Window, public AUTIL::IExtensible

        {

        public:

#ifdef MTEST    /* For module testing */
            DECLARE_TESTABLE;
#endif /* ifdef MTEST */

            /**
            * Constructor with arguments: WidgetHelper index, Window ID and WidgetDescriptor index
            * 1. First the widget class members are initialised.
            * 2. If widget window belongs to widget, it is created and attached, while if it is a CIA window, surface assembly is requested and window is simply attached.
            * 3. The ID received by the constructor is a WRS generated Window ID.
            *   - For windows belonging to widgets, this WRS ID is first mapped to an ID generated by CIA which allows getting the window fast.
            *   - For CIA windows, WRS IDs and CIA IDs are the same thing, so it is directly used.
            * @param [input] uint16 u16HelperIndex_. Index of associated WidgetHelper instance.
            * @param [input] uint16 u16WindowID_. Window ID. WRS Window ID.
            * @param [input] uint16 u16WidgetDescriptorIndex_. Index of associated WidgetDescriptor.
            */
            Widget (const uint16 u16HelperIndex_ , const uint16 u16WindowID_ , const uint16 u16WidgetDescriptorIndex_);

            /**
            * Overriden new operator. Instead of using default memory allocation by compiler, allocate to specific memory address.
            * @param [input] size_t Size_. Size of memory needed
            * @param [input] WMMS::Allocator* u16WidgetHelperIndex_. Pointer to WMMS::Allocator to allocate memory
            * @param [input] uint16 u16WidgetHelperIndex_. Index of associated WidgetHelper
            * @return  void*. A pointer to allocated memory address. If no memory is allocated for this instance, NULL pointer returned.
            */
            static void* operator new( const size_t Size_, WMMS::Allocator* const poAllocator_, const uint16 u16WidgetHelperIndex_);

            /**
            * Overriden delete operator. Free memory allocated to widget.
            * @param [input] void* const poWidget_. A void pointer to widget instance
            * @param [input] WMMS::Allocator* poAllocator_. Pointer to WMMS::Allocator which allocated the memory before
            * @param [input] uint16 u16WidgetHelperIndex_. Index of associated WidgetHelper
            * @return void
            */
            static void operator delete( void* const poWidget_, WMMS::Allocator* const poAllocator_, const uint16 u16WidgetHelperIndex_);

            /**
            * Non-placement delete operator
            * @param [input] void* const: pointer to object to be deleted
            * @return void
            */
            static void operator delete ( void* const );

            /**
            * Destroy widget instance. Deinialises and frees memory allocated to widget.
            * 1. Calls destructor
            * 2. Frees allocated memory
            * @param [input] WMMS::Allocator* poAllocator_. Pointer to WMMS::Allocator which allocated the memory before
            * @return void
            */
            virtual void vDestroy ( WMMS::Allocator* const poAllocator_ );

            /**
            * Helps derived widgets to retreive the memory pool ID for Widget data
            * @param [input] void
            * @return uint16. Pool ID to use for allocating memory for widget data
            */
            uint16 u16GetDataMemoryPoolID ( void );

            /**
            * Internal use only
            * In base widget, propagates parent properties to children, reverts child list & sets state to Init/InitAgain
            * In visibility controller, sets visibility of state as per state of the controller
            * @param [input] void
            * @return void.
            */
            virtual void vInitialize (void);

            /*=========================== Window and drawing operations ============================*/

            /**
            * Setter for Window position.
            * @param [input] int16 i16PosX_. X-position of window, it use relative position.
            * @param [input] int16 i16PosY_. Y-position of window, it use relative position.
            * @return void
            */
            void vSetPos( const int16 i16PosX_, const int16 i16PosY_ );

            /**
            * Setter for Window size.
            * @param [input] uint16 u16Width_. Width of window
            * @param [input] uint16 u16Height_. Height of window
            * @return void
            */
            void vSetSize( const uint16 u16Width_, const uint16 u16Height_ );

            /**
            * Setter for Window position and size.
            * @param [input] int16 i16PosX_. X-position of window
            * @param [input] int16 i16PosY_. Y-position of window
            * @param [input] uint16 u16Width_. Width of window
            * @param [input] uint16 u16Height_. Height of window
            * @return void
            */
            void vSetPosSize( const int16 i16PosX_, const int16 i16PosY_, const uint16 u16Width_, const uint16 u16Height_ );

            /**
            * Setter for Window position X.
            * @param [input] int16 i16PosX_. X-position of window, it use relative position.
            * @return void
            */
            void vSetPosX ( const int16 i16PosX_ );

            /**
            * Getter for Window X-position.
            * @param [input] void.
            * @return int16. This is the X-position of window
            */
            int16 i16GetPosX( void ) const;

            /**
            * Setter for Window position Y.
            * @param [input] int16 i16PosY_. Y-position of window, it use relative position.
            * @return void
            */
            void vSetPosY(const int16 i16PosY_);

            /**
            * Getter for Window Y-position.
            * @param [input] void.
            * @return int16. This is the Y-position of window
            */
            static int16 i16GetPosY( void ) const;

            /**
            * Setter for Window position Z.
            * @param [input] uint16 u16PosZ_. Z-position of window, it use relative position.
            * @return void
            */
            void vSetPosZ ( const uint16 u16PosZ_ );

            /**
            * Setter for Window width.
            * @param [input] uint16 u16Width_. Width of window
            * @return void
            */
            void vSetWidth ( const uint16 u16Width_ );

            /**
            * Setter for Window height.
            * @param [input] uint16 u16Height_. Height of window
            * @return void
            */
            void vSetHeight ( const uint16 u16Height_ );

            /**
            * Setter for Window transparency. This function can be overridden by derived classes.
            * @param [input] bool boTransparency_. If this parameter is true, window is transparent. Otherwise, window is not transparent.
            * @return void
            */
            void vSetTransparency( const bool boTransparency_ );

            /**
            * Getter for Window transparency.
            * @param [input] void.
            * @return bool. If return value is true, window is transparent. Otherwise, window is not transparent.
            */
            bool boGetTransparency (void) const;

            /**
            * Updates the visibility of the associated Window,
            * and also propagates in window tree
            * @return void.
            */
            void vUpdateWindowTreeAtRuntime (void);

            /**
            * Updates the visibility of the associated Window only,
            * and does not propagate
            * @return void.
            */
            void vUpdateWindowTreeAtBuildTime (void);

            /**
            * Activates the APIs linked to the widget.
            * @param void.
            * @return void.
            */
            void vRegisterForAPIs (void);

            /*=========================== Controller methods ===============================*/

            /**
            * Getter for associated strategy
            * Empty definition here. Overwritten in ControllerContainer.
            * @param void
            * @return WSMS::ControllerStrategy *. Pointer to strategy.
            */
            virtual WSMS::ControllerStrategy * poGetStrategy (void);

            /**
            * Setter for associated strategy
            * Empty definition here. Overwritten in ControllerContainer.
            * @param [input] WSMS::ControllerStrategy *.
            * @return void
            */
            virtual void vSetController (WSMS::ControllerStrategy *);

            /**
            * Getter for controller state
            * Overwritten in ControllerContainer.
            * @param void
            * @return uint16. Returns nCONTROLLERSTATE_INVALID here in base class.
            */
            virtual uint16 u16GetControllerState (void) const;

            /**
            * Adds another widget as child by calling Window's method
            * propagates visibility and coordinate information down the subtree of new widget
            * Also updates the widget helper parent child relationship
            * @Note TODO: can be removed if widget helper is removed !
            * @param poChildWidget pointer of other widget
            *
            * Important Warning: Do not use this interface. It will be deprecated in the near future!
            */
            virtual void vAddChild(Window* poChildWindow) override;

            /**
            * Detaches this window from its parent by calling Window's method
            * coordinates are changed to relative
            * Also updates the widget helper parent child relationship
            *
            * Important Warning: Do not use this interface. It will be deprecated in the near future!
            */
            virtual void vRemoveFromParent() override;

            /*=========================== Widget tree getters ===============================*/

            /**
            * Getter for pointer to next-sibling widget
            * @param [input] void
            * @return Widget*. A pointer to next-sibling widget. Null is returned if no next widget in tree.
            */
            Widget* poGetNextWidget (void) const;

            /**
            * Getter for pointer to previous-sibling widget
            * @param [input] void
            * @return Widget*. A pointer to previous-sibling widget.  Null is returned if no previous widget in tree.
            */
            Widget* poGetPrevWidget (void) const;

#ifdef QACPP_ANALYSIS_ONLY
#pragma PRQA_MESSAGES_OFF 2139
/*
 * 4 June 2015, Rishi Khaneja, Christian Opel,
 * Covariant return types are supported on the compilers we use i.e. MSVC & Multi.
 */
#endif /* QACPP_ANALYSIS_ONLY */

            /**
            * Getter for pointer to first child of this widget
            * @param [input] void
            * @return Widget*. A pointer to first child of this widget. Null is returned if widget has no children.
            */
            Widget* poGetFirstChild (void) const;

            /**
            * Getter for id of first child of this widget
            * @param [input] void
            * @return uint16. id of first child. WRS::InvalidWidgetID is returned if widget has no children.
            */
            uint16 u16GetFirstChildID(void) const;

            /**
            * Getter for pointer to parent widget
            * @param [input] void
            * @return Widget*. A pointer to parent of this widget. Null is returned if widget has no parent.
            */
            virtual Widget* poGetParent (void) const;

#ifdef QACPP_ANALYSIS_ONLY
#pragma PRQA_MESSAGES_ON 2139
/* re-activate QA C++ Warning(s) */
#endif /* QACPP_ANALYSIS_ONLY */
            /**
            * Getter for pointer to last child of this widget
            * @param [input] void
            * @return Widget*. A pointer to last child of this widget. Null is returned if widget has no children.
            */
            Widget* poGetLastChild (void) const;

            /**
            * Checks if widget is the last child of its parent
            * @param [input] void
            * @return boolean. Returns true if widget is the last child. Otherwise, returns false.
            */
            bool boIsLastChild (void) const;

            /**
            * Getter for pointer to focused child of widget
            * @param [input] void
            * @return Widget*. A pointer to current focused child of this widget. Null is returned if no child is focused.
            */
            Widget* poGetFocusedChild(void) const;

            /*=========================== Getters for base widget properties ===============================*/

            /**
            * Getter for WRS ID of the widget
            * @param [input] void
            * @return uint16
            */
            uint16 u16GetID (void) const;

            /**
            * Getter for Widget-Helper index of the widget
            * @param [input] void
            * @return uint16
            */
            uint16 u16GetWidgetHelperIndex (void) const;

            /**
            * Returns type of the widget
            * This method must be overwriten by each derived widget to return its type.
            * @param [input] void
            * @return WRS::WidgetClassID. Type of the Widget. Here WRS::WidgetClassID_HMI_WFC_Widget.
            */
            virtual WRS::WidgetClassID enGetType (void) const;

            /*=========================== Display getters ===============================*/

            /**
            * Getter for ID of the display controller the widget belongs to
            * @param [input] void
            * @return uint16. ID of the display controller.
            */
            uint16 u16GetDisplayID (void) const;

            /**
            * Getter for pointer to the display controller the widget belongs to
            * @param [input] void
            * @return WAS::DisplayController. Pointer to display controller.
            */
            WAS::DisplayController *poGetDisplay (void) const ;

            /*========= Setters/Getters for base widget properties =========*/

            /**
            * Getter for the Visibility of Widget
            * A widget is visible only if along with itself, all its parent widgets have been set to visible.
            * @param [input] void
            * @return bool. Returns true if widget is visible. Otherwise, returns false.
            */
            bool boIsVisible( void ) const;

            /**
            * Setter for the Visible property.
            * 1. Updates visibility
            * 2. Propagates to children if needed
            * 3. Triggers APIM
            * 4. Updates associated window visibility
            * @param [input] bool boVisible_ . New value of the property.
            * @return void
            */
            void vSetVisible( const bool boVisible_ );

            /**
            * Getter for the Enable property
            * A widget is Enabled only if along with itself, all its parent widgets have been set to Enabled.
            * @param [input] void
            * @return bool. Returns true if widget is enabled. Otherwise, returns false.
            */
            bool boIsEnable( void ) const;

            /**
            * Setter for the Enable property.
            * @param [input] bool boEnabled_. New value of the property.
            * @return void
            */
            void vSetEnabled ( const bool boEnabled_ );

            /**
            * Getter for the DoUpdate property
            * @param [input] void
            * @return bool. Return true if widget is updated. Otherwise, return false.
            */
            bool boIsDoUpdate( void ) const;

            /**
            * Setter for the DoUpdate property.
            * @param [input] bool boDoUpdate_. Set widget to be updated if this variable is true. Otherwise, set widget to be not updated.
            * @return void
            */
            void vSetDoUpdate ( const bool boDoUpdate_ );

            /**
            * Getter for the Focusable property
            * @param [input] void
            * @return bool. Return true if widget is focusable. Otherwise, return false.
            */
            bool boIsFocusable( void ) const;

            /**
            * Setter for the Focusable property.
            * @param [input] bool boFocusable_. Set widget to be focusable if this variable is true. Otherwise, set widget to be not focusable.
            * @return void
            */
            void vSetFocusable( const bool boFocusable_ );

            /**
            * Getter for the Focused property
            * @param [input] void
            * @return bool. Return true if widget is focused. Otherwise, return false. Return is always false for Non-Focusable widgets.
            */
            bool boIsFocused( void ) const;

            /**
            * Setter for the Focused property.
            * @param [input] bool boFocused_. Set widget to be focused if this variable is true. Otherwise, set widget to be not focused. Widget can be focused only if it is focusable & visible.
            * @return void
            */
            void vSetFocused( const bool boFocused_ );

            /**
            * Getter for Shared flag
            * @param [input] void
            * @return bool. Return true if widget is currently shared between two active scenes of a transition controller.
            */
            bool boIsShared( void ) const;

            /**
            * Setter for Shared flag
            * @param [input] bool boShared_. Used by displaycontroller to mark that widget is shared between two active scenes of a transition controller.
            * @return void
            */
            void vSetShared( const bool boShared_ );

            /** Getter for the bAnimationRunning property
            *  @param [input] void
            *  @return bool.
            */
            bool boIsAnimationRunning(void) const;

            /** Getter for the bAnimationRunning property
            *  @param [input] bool bAnimationRunning
            *  @return void
            */
            void vSetAnimationRunning(const bool boAnimationRunning);

            /*====================== Setters used by widget builder ========================*/

            /**
            * Build Setter for Window position and size. (No check, No notification)
            * @param [input] int16 i16PosX_. X-position of window
            * @param [input] int16 i16PosY_. Y-position of window
            * @param [input] uint16 u16Width_. Width of window
            * @param [input] uint16 u16Height_. Height of window
            * @return void
            */
            void vSetPosSizeForWidgetBuilder (int16 i16PosX_, int16 i16PosY_, uint16 u16Width_, uint16 u16Height_) ;

            /**
            * Build Setter for the Focused property.
            * Only sets the Focused flags.
            * @param [input] bool boFocused_. If true, set flag Focused to 1, Otherwise, set it to 0.
            * @return void
            */
            void vSetFocusedDontPropagate ( const bool boFocused_ );

            /**
            * Build Setter for the Focusable property.
            * Only sets the Focusable flags.
            * @param [input] bool boFocusable_. If true, set flag Focusable to 1, Otherwise, set it to 0.
            * @return void
            */
            void vSetFocusableDontPropagate ( const bool boFocusable_ );

            /**
            * Build Setter for the DoUpdate property.
            * Only sets the DoUpdate flags.
            * @param [input] bool boDoUpdate_. If true, set flag DoUpdate to 1, Otherwise, set it to 0.
            * @return void
            */
            void vSetDoUpdateDontPropagate ( const bool boDoUpdate_ );

            /**
            * Build Setter for the Visible property.
            * Only sets the Visible flags.
            * @param [input] bool boVisible_ . If true, set flag Visible to 1, Otherwise, set it to 0.
            * @return void
            */
            void vSetVisibleDontPropagate( const bool boVisible_ );

            /**
            * Build Setter for the Enable property.
            * Only sets the Enable flags.
            * @param [input] bool boEnabled_. If true, set flag Enable to 1, Otherwise, set it to 0.
            * @return void
            */
            void vSetEnabledDontPropagate( const bool boEnabled_ );

            /*====================== FinalHook methods ========================*/

            /**
            * Setter for u16FinalhookID
            * @param [input] uint16 u16HookID. ID of the widget's Final hook method i.e. index in final hook array.
            * @return void.
            */
            void vSetFinalHookIndex (uint16 u16HookID_);

            /**
            * Return type for method pfGetFinalHookFunc
            * A function pointer wirh return type "WCS::enMessageStatus" and parameters "Widget * poWidget, WCS::Message * poMsg"
            */
            typedef WCS::enMessageStatus (*FinalHookType)(Widget * poWidget, WCS::Message * poMsg);

            /**
            * Returns this widget's final hook function based on final hook ID (u16FinalHookID)
            * @param [input] void
            * @return FinalHookType. A pointer to a finalHook function.
            */
            FinalHookType pfGetFinalHookFunc( void ) const;

            /**
            * Notifies change in widget property
            * Sends MsgID_PreNotify to widget's final hook directly & calls the OnChange
            * @param [input] uint16 u16PropertyID. ID of the changed property
            * @return void.
            */
            void vNotify( uint16 u16PropertyID );

            /*====================== Message processing methods ========================*/

            /**
            * Provides with a widget-class-specific message processing
            * Can be overloaded in derived widget with widget-specific implementation
            * Is usually called by HandleMessage which receives the message from outside
            * @param [input] WCS::Message * poMessage_. A pointer to message passed to this widget
            * @return WCS::enMessageStatus. There are 3 types of WCS::enMessageStatus: block message flag, pass message flag and consume message flag
            */
            virtual WCS::enMessageStatus enProcessMessage (WCS::Message * const poMessage_);

            /**
            * Provides with base widget message processing before call to ProcessMessageHook
            * Reponsible for maintaining the states of widgets through a set of dedicated state change messages
            * First message hook called by HandleMessage of widget.
            * @param [input] WCS::Message * poMessage_. A pointer to message passed to this widget
            * @return WCS::enMessageStatus. There are 3 types of WCS::enMessageStatus: block message flag, pass message flag and consume message flag
            */
            WCS::enMessageStatus PreMsgHook_ (WCS::Message * const poMessage_) ;

            /**
            * Placeholder for future base widget message processing between calls to ProcessMessageHook and FinalHook
            * Called by HandleMessage of widget.
            * @param [input] WCS::Message * poMessage_. A pointer to message passed to this widget
            * @return WCS::enMessageStatus. There are 3 types of WCS::enMessageStatus: block message flag, pass message flag and consume message flag
            */
            WCS::enMessageStatus MiddleMsgHook_ (WCS::Message * const poMessage_);

            /**
            * Placeholder for future base widget message processing after call to FinalHook
            * Called by HandleMessage of widget.
            * @param [input] WCS::Message * poMessage_. A pointer to message passed to this widget
            * @return WCS::enMessageStatus. There are 3 types of WCS::enMessageStatus: block message flag, pass message flag and consume message flag
            */
            WCS::enMessageStatus PostMsgHook_ (WCS::Message * const poMessage_);

#if WFC_USE_PRE_MSG_HOOK == 1

            /**
            * This method can hold class-specific message processing needed before ProcessMessage is called.
            * Called by HandleMessage of widget.
            * Can be disabled by setting HMI_WFC_USE_PRE_MSG_HOOK to 0.
            * Can be overloaded by derived widgets.
            * @param [input] WCS::Message * poMessage_. A pointer to message passed to this widget
            * @param [output] WCS::enMessageStatus enStatusReturn. Message status return.
            * @return bool. This return value is used to determine whether ProcessMessage hook must be called with this message or not. (Also, FinalHook if MiddleHook is disabled)
            */
            virtual bool PreMsgHook (WCS::Message * poMessage_, WCS::enMessageStatus * enStatusReturn_);

#endif /* WFC_USE_PRE_MSG_HOOK == 1 */

#if WFC_USE_MID_MSG_HOOK == 1

            /**
            * This method can hold class-specific message processing needed after ProcessMessage is called, but before Final-Hook of the widget is called
            * Called by HandleMessage of widget.
            * Can be disabled by setting HMI_WFC_USE_MID_MSG_HOOK to 0.
            * Can be overloaded by derived widgets.
            * @param [input] WCS::Message * poMessage_ . A pointer to message passed to this widget
            * @param [input] WCS::enMessageStatus enCummulatedStatus_. Message status cumulated from prior hooks.
            * @param [input] bool boPreHookReturn_. Boolean return from PreMsgHook_.
            * @param [output] WCS::enMessageStatus enStatusReturn_. Message status return.
            * @return bool. Return value from this method is used to determine whether FinalHook must be called with this message or not.
            */
            virtual bool MiddleMsgHook (WCS::Message * poMessage_, WCS::enMessageStatus enCummulatedStatus_, bool boPreHookReturn_, WCS::enMessageStatus * enStatusReturn_);

#endif /* WFC_USE_MID_MSG_HOOK */

#if WFC_USE_POST_MSG_HOOK == 1

            /**
            * This method can hold class-specific message processing needed after Final-Hook has been called.
            * Called by HandleMessage of widget.
            * Can be disabled by setting HMI_WFC_USE_POST_MSG_HOOK to 0.
            * @param [input] WCS::Message * poMessage_ . A pointer to message passed to this widget
            * @param [input] WCS::enMessageStatus enCummulatedStatus_. Message status cumulated from prior hooks.
            * @param [input] bool boPreHookReturn_. Boolean return from PreMsgHook_.
            * @param [input] bool boMidHookReturn_. Boolean return from MiddleMsgHook (PreMsgHook_ if middle is disabled).
            * @return WCS::enMessageStatus. There are 3 types of WCS::enMessageStatus: block message flag, pass message flag and consume message flag
            */
            virtual WCS::enMessageStatus PostMsgHook (WCS::Message * poMessage_, WCS::enMessageStatus enCummulatedStatus_, bool boPreHookReturn_, bool boMidHookReturn_);

#endif /* WFC_USE_POST_MSG_HOOK */

            /**
            * Receives the messages sent to the widget
            * Calls the following hooks in the same order:
            * 1. PreMsgHook_ 2. PreMsgHook 3. ProcessMessage 4. MiddleMsgHook_ 5. MiddleMsgHook 6. FinalHook 7. PostMsgHook_ 8. PostMsgHook
            * @param [input] WCS::Message *m . A pointer to message passed to this widget
            * @return WCS::enMessageStatus. There are 3 types of WCS::enMessageStatus: block message flag, pass message flag and consume message flag
            */
            WCS::enMessageStatus HandleMessage (WCS::Message * const poMessage_);

            /*======== Widget states enumerations and getter/setters ========*/


            /**
            * Set the widget state to specified
            * @param [input] WidgetStates enState_. State of widget.
            * @return void.
            */
            void vSetState (WidgetStates enState_);

            /**
            * Getter for widget state
            * @param [input] void
            * @return WidgetStates. state of widget.
            */
            WidgetStates enGetState (void) const;

            /**
            * Check if widget is in state New
            * @param [input] void
            * @return boolean. Returns true if widget is in state New, else returns false.
            */
            bool boIsStateNew (void) const;

            /**
            * Check if widget is in state Init
            * @param [input] void
            * @return boolean. Returns true if widget is in state Init, else returns false.
            */
            bool boIsStateInit (void) const;

            /**
            * Check if widget is in state Running
            * @param [input] void
            * @return boolean. Returns true if widget is in state Running, else returns false.
            */
            bool boIsStateRunning (void) const;

            /**
            * Check if widget is in state InitAgain
            * @param [input] void
            * @return boolean. Returns true if widget is in state InitAgain, else returns false.
            */
            bool boIsStateInitAgain (void) const;

            /**
            * Check if widget is in state RunningAgain
            * @param [input] void
            * @return boolean. Returns true if widget is in state RunningAgain, else returns false.
            */
            bool boIsStateRunningAgain (void) const;

            /**
            * Check if widget is in state ChangingTree
            * @param [input] void
            * @return boolean. Returns true if widget is in state ChangingTree, else returns false.
            */
            bool boIsStateChangingTrees (void) const;

            /**
            * Check if widget is in state PrepareToDestroy
            * @param [input] void
            * @return boolean. Returns true if widget is in state PrepareToDestroy, else returns false.
            */
            bool boIsStatePrepareToDestroy (void) const;

            /**
            * Check if widget has been fully initialised, properties have been updated by API if connected and children have been fully initialised.
            * @param [input] void
            * @return boolean. Returns true if widget is in state Running or RunningAgain, else returns false.
            */
            bool boIsReadyForClientAccess (void) const;

            /*======== getter/setters for other attributes ========*/

            /**
            * Check if widget is a common widget
            * @param [input] void
            * @return boolean. Returns true if CommonWidget flag is set (value = 1), else returns false.
            */
            bool boIsCommonWidget (void) const;

            /**
            * Setter for CommonWidget flag of the widget, sets the value of flag to 1 (from initial value 0).
            * @param [input] void
            * @return void.
            */
            void vSetCommonWidget (void);

            /**
            * Check if widget is a composition relevant
            * @param [input] void
            * @return boolean. Returns true if WRS Getter returns true (pre-analyzed information)
            */
            bool boIsCompositionRelevant(void) const;

            /**
            * Check if the widget type derives from CompWidget
            * @param [input] void
            * @return boolean. Returns true if WRS Getter returns true (pre-analyzed information)
            */
            bool boIsCompWidget(void) const;

            /**
            * Used to check if a TreeBuildDone received by a widget is the first one.
            * @param [input] void
            * @return boolean. Returns true if HasFirstTreeBuildDone flag has not been set (value = 0), else (value = 1) returns false.
            */
            bool boIsFirstTreeBuild(void) const;

            /**
            * Setter for HasFirstTreeBuildDone flag, sets the value of flag to 1 (from initial value 0).
            * @param [input] void.
            * @return void.
            */
            void vSetHasTreeBuildDone (void);

            /**
            * Switch to Running states
            * If in state Init, then change to Running. Else if in state InitAgain, change to RunningAgain.
            * @param [input] void
            * @return void.
            */
            void vSwitchToRunningState (void);

            /**
            * Used by display controller to propagate absolute coords
            */
            void vPropagateWindowCoords (void);

            /*======== Child access interfaces (Previously in Container) ========*/

            /**
            * Get child widget with specific WRS ID
            * @param [input] uint16 u16ID_. ID here refers to WRS ID of the wanted child.
            * @return Widget*. A pointer to found widget. If no match found, returns NULL.
            */
            Widget * poGetChildById (uint16 u16ID_) const;

            /**
            * Get child widget with specific index
            * @param [input] uint16 u16Index. This is the relative position of child below widget, first child being 0.
            * @return Widget*. A pointer to found widget. If no match found, returns NULL.
            */
            Widget * poGetChildByIndex (uint16 u16Index_) const;

            /**
            * Check if specified widget is a child of this Widget.
            * @param [input] Widget* poWidget_. Pointer to the widget.
            * @return bool. Return true if poMyWidget is a child. Otherwise, return false
            */
            bool boIsChild (Widget * poWidget_) const;

            /**
            * Check if specified widget is a child of this Widget.
            * @param [input] Widget* u16WidgetHelperIndex_. Index of widget in widget helper array.
            * @return bool. Return true if poMyWidget is a child. Otherwise, return false
            */
            bool boIsChild (uint16 u16WidgetHelperIndex_) const;

            /**
            * Get pointer to next child widget.
            * @param [input] Widget* poWidget_. A pointer to a child widget to which the next child is wanted.
            * @param [input] bool boReturnNull. For case, input widget is invalid or not a child of this widget : if true, first child of this widget is returned, If false, NULL will be returned. Default value = false.
            * @return Widget*. A pointer to next child widget.
            * Note: if input widget is the last child, NULL will be returned.
            */
            Widget * poGetNextChild (Widget *poWidget_, bool boReturnNull = false) const;

            /**
            * Get pointer to previous child widget.
            * @param [input] Widget* poWidget_. A pointer to a child widget to which the previous child is wanted.
            * @param [input] bool boReturnNull. For case, input widget is invalid or not a child of this widget : if true, last child of this widget is returned, If false, NULL will be returned. Default value = false.
            * @return Widget*. A pointer to previous child widget.
            * Note: if input widget is the first child, a null pointer is returned.
            */
            Widget * poGetPrevChild (Widget *poWidget_, bool boReturnNull = false) const;

            /**
            * Get pointer to next child widget.
            * @param [input] uint16 u16ID_. WRS ID of a child widget to which the next child is wanted.
            * @param [input] bool boReturnNull. For case, input widget is invalid or not a child of this widget : if true, first child of this widget is returned, If false, NULL will be returned. Default value = false.
            * @return Widget*. A pointer to next child widget.
            * Note: if input widget is the first child, a null pointer is returned.
            */
            Widget * poGetNextChild (uint16 u16ID_, bool boReturnNull = false) const;

            /**
            * Get pointer to previous child widget.
            * @param [input] uint16 u16ID_. WRS ID of a child widget to which the previous child is wanted.
            * @param [input] bool boReturnNull. For case, input widget is invalid or not a child of this widget : if true, last child of this widget is returned, If false, NULL will be returned. Default value = false.
            * @return Widget*. A pointer to previous child widget.
            * Note: if input widget is the first child, a null pointer is returned.
            */
            Widget * poGetPrevChild (uint16 u16ID_, bool boReturnNull = false) const;

            /**
            * Get pointer to next child of widget where the values of specified properties are true.
            * @param [input] Widget *poWidget_. A pointer to child widget where the search starts.
            * @param [input] bool bMyFilterVisible. Filter for visible. If true, Widget with visible = true is searched for, if false, visible of widget is ignored.
            * @param [input] bool bMyFilterFocused. Filter for focused. If true, Widget with Focused = true is searched for, if false, Focused of widget is ignored.
            * @param [input] bool bMyFilterFocusable. Filter for focusable. If true, Widget with Focusable = true is searched for, if false, Focusable of widget is ignored.
            * @param [input] bool boWrap. For case, input widget is invalid or not a child of this widget : if true, search starts at first child of this widget, If false, NULL will be returned. Default value = true.
            * @return Widget*. A pointer to found widget.
            */
            Widget * poGetNextChildByFilter (Widget *poWidget_ , bool bMyFilterVisible = false , bool bMyFilterFocused = false , bool bMyFilterFocusable = false , bool boWrap = true) const;

            /**
            * Get pointer to previous child of widget where the values of specified properties are true.
            * @param [input] Widget *poWidget_. A pointer to child widget where the search starts.
            * @param [input] bool bMyFilterVisible. Filter for visible. If true, Widget with visible = true is searched for, if false, visible of widget is ignored.
            * @param [input] bool bMyFilterFocused. Filter for focused. If true, Widget with Focused = true is searched for, if false, Focused of widget is ignored.
            * @param [input] bool bMyFilterFocusable. Filter for focusable. If true, Widget with Focusable = true is searched for, if false, Focusable of widget is ignored.
            * @param [input] bool boWrap. For case, input widget is invalid or not a child of this widget : if true, search starts at last child of this widget, If false, NULL will be returned. Default value = true.
            * @return Widget*. A pointer to found widget.
            */
            Widget * poGetPreviousChildByFilter (Widget *poWidget_ , bool bMyFilterVisible = false , bool bMyFilterFocused = false , bool bMyFilterFocusable = false , bool boWrap = true) const;

            /**
            * Get pointer to next child of widget where the values of specified properties are true.
            * @param [input] uint16 u16ID_. WRS ID of child widget where the search starts. If invalid or not a child, search starts at first child.
            * @param [input] bool bMyFilterVisible. Filter for visible. If true, Widget with visible = true is searched for, if false, visible of widget is ignored.
            * @param [input] bool bMyFilterFocused. Filter for focused. If true, Widget with Focused = true is searched for, if false, Focused of widget is ignored.
            * @param [input] bool bMyFilterFocusable. Filter for focusable. If true, Widget with Focusable = true is searched for, if false, Focusable of widget is ignored.
            * @param [input] bool boWrap. For case, input widget is invalid or not a child of this widget : if true, search starts at first child of this widget, If false, NULL will be returned. Default value = true.
            * @return Widget*. A pointer to found widget.
            */
            Widget * poGetNextChildByFilter (uint16 u16ID_ , bool bMyFilterVisible = false , bool bMyFilterFocused = false , bool bMyFilterFocusable = false , bool boWrap = true) const;

            /**
            * Get pointer to previous child of widget where the values of specified properties are true.
            * @param [input] uint16 u16ID_. WRS ID of child widget where the search starts. If invalid or not a child, NULL is returned.
            * @param [input] bool bMyFilterVisible. Filter for visible. If true, Widget with visible = true is searched for, if false, visible of widget is ignored.
            * @param [input] bool bMyFilterFocused. Filter for focused. If true, Widget with Focused = true is searched for, if false, Focused of widget is ignored.
            * @param [input] bool bMyFilterFocusable. Filter for focusable. If true, Widget with Focusable = true is searched for, if false, Focusable of widget is ignored.
            * @param [input] bool boWrap. For case, input widget is invalid or not a child of this widget : if true, search starts at last child of this widget, If false, NULL will be returned. Default value = true.
            * @return Widget*. A pointer to found widget.
            */
            Widget * poGetPreviousChildByFilter (uint16 u16ID_ , bool bMyFilterVisible = false , bool bMyFilterFocused = false , bool bMyFilterFocusable = false , bool boWrap = true) const;

            /**
            * Return relative position of a child widget with given WRS ID
            * @param [input] uint16 u16ID_. WRS ID to the child widget.
            * @return uint16. Position of the widget in child list. If not a child, nMAX_RANGE_OF_CHILDREN is returned.
            */
            uint16 u16GetIndexOfChild (uint16 u16ID_) const;

            /**
            * Return relative position of a child widget with given pointer
            * @param [input] Widget* poMyWidget. A pointer to the widget.
            * @return uint16. Position of the widget in child list. If not a child, nMAX_RANGE_OF_CHILDREN is returned.
            */
            uint16 u16GetIndexOfChild (Widget *poWidget_) const;

            /**
            * Get number of child-widgets of this widget
            * @param [input] void
            * @return uint16. Return number of children
            */
            uint16 u16GetNumOfChildren (void) const;

            // NOTE : killing these features as a preparation for inevitable death of widget helper

            ///**
            //* Add new widget as child of this widget at specified position.
            //* @param [input] Widget* poWidget_. A pointer to new child widget
            //* @param [input] uint16 u16Index_. Position under the widget where given widget should be placed.
            //* @return bool. Return true if successful.
            //*/
            //bool boAddChildByIndex (Widget *poWidget_ , uint16 u16Index_);

            ///**
            //* Remove child widget at specific relative position.
            //* @param [input] uint16 u16Index_. Position of widget which is removed.
            //* @return bool. Return true if successful.
            //*/
            //bool boRemoveChildByIndex (uint16 u16Index_);

            ///**
            //* Remove child with specific widget helper index
            //* @param [input] uint16 u16HelperIndex_. WidgetHelper Index of widget being removed.
            //* @return bool. Return true if successful.
            //*/
            //bool boRemoveChildByHelperIndex (uint16 u16HelperIndex_);

            /*====================== Property change handlers ========================*/

            /**
            * Called by setters if there is a change in widget's property: PosX
            * Can be overriden by project's widgets, to perform some operations when this property changes.
            * @param void.
            * @return void.
            */
            virtual void OnChangePosX (void);

            /**
            * Called by setters if there is a change in widget's property: PosY
            * Can be overriden by project's widgets, to perform some operations when this property changes.
            * @param void.
            * @return void.
            */
            virtual void OnChangePosY (void);

            /**
            * Called by setters if there is a change in widget's property: PosZ
            * Can be overriden by project's widgets, to perform some operations when this property changes.
            * @param void.
            * @return void.
            */
            virtual void OnChangePosZ (void);

            /**
            * Called by setters if there is a change in widget's property: Width
            * Can be overriden by project's widgets, to perform some operations when this property changes.
            * @param void.
            * @return void.
            */
            virtual void OnChangeWidth (void);

            /**
            * Called by setters if there is a change in widget's property: Height
            * Can be overriden by project's widgets, to perform some operations when this property changes.
            * @param void.
            * @return void.
            */
            virtual void OnChangeHeight (void);

            /**
            * Called by setters if there is a change in widget's property: Visible
            * Can be overriden by project's widgets, to perform some operations when this property changes.
            * @param void.
            * @return void.
            */
            virtual void OnChangeVisibility (void);

            /**
            * Called by setters if there is a change in widget's property: Transparency
            * Can be overriden by project's widgets, to perform some operations when this property changes.
            * @param void.
            * @return void.
            */
            virtual void OnChangeTransparency (void);

            /**
            * Called by setters if there is a change in widget's property: Focused
            * Can be overriden by project's widgets, to perform some operations when this property changes.
            * @param void.
            * @return void.
            */
            virtual void OnChangeFocused (void);

            /**
            * Called by setters if there is a change in widget's property: Focusable
            * Can be overriden by project's widgets, to perform some operations when this property changes.
            * @param void.
            * @return void.
            */
            virtual void OnChangeFocusable (void);

            /**
            * Called by setters if there is a change in widget's property: Enabled
            * Can be overriden by project's widgets, to perform some operations when this property changes.
            * @param void.
            * @return void.
            */
            virtual void OnChangeEnable (void);

            /**
            * Called by setters if there is a change in widget's property: DoUpdate
            * Can be overriden by project's widgets, to perform some operations when this property changes.
            * @param void.
            * @return void.
            */
            virtual void OnChangeDoUpdate (void);

#if HMI_TREEDEBUGGER == On

            /**
            * Serializes widget information for Widget Tree Debugger to display.
            * @param void.
            * @return  WAS::WidgetDescription. Serialised information about the widget.
            */
            virtual WAS::WidgetDescription Serialize(void);

#endif /* HMI_TREEDEBUGGER == On */


            /*====================== Getters for Warning Widget ========================*/

            /**
            * Downcasting Helper: Returns a pointer to self for WarningWidget or derived type, NULL for other types
            * @param void.
            * @return WarningWidget *
            */
            virtual WarningWidget * poGetAsWarningWidget(void);

            /**
            * Handles the information of parent's CompVisibility having changed for this widget
            * only relevant for CompWidgets, other widgets pass the information further down the tree
            * @param [input] uint8 u8CompVisibility_ parent's CompVisibility
            * @return void
            */
            virtual void vOnParentCompVisibilityChanged(const uint8 u8CompVisibility_);

            /** Provides a default, empty implementation of IExtensible.
            */
            virtual void *GetExtension(const AUTIL::ExtensionID &idExtension) const override;

            DECLARE_TYPEID(Widget, HMI::AVITREM::Window)

#ifndef ART_UNIT_TEST
        protected:
#endif

            /**
            * Default Destructor
            * 1. Frees associated block in WidgetHelper
            * 2. Destroys/detaches associated window
            * @param [input] void
            */
            virtual ~Widget (void) ;

            /**
            * Checks if property propagation is needed for current state of widget
            * These are states Init, InitAgain, Running and RunningAgain
            * Since, for all other states, we either have a "TreeInit" event coming after
            * which will arrange the tree, or we will destroy soon the subtree,
            * @param [input] void
            * @return boolean. Returns true if propagation is needed.
            */
            bool boIsPropertyPropagationRequired(void) const;

            /*====================== Property-Propagaters ========================*/

            /**
            * Propagates the change in widget's property down the subtree
            * @param [input] Widget:: * poSetter_. Setter method for the respective property.
            * @param [input] bool boStatus_. New value for the property.
            * @return void
            */
            template <void (Widget:: * poSetter_) (bool)>
            void vPropagate(const bool boStatus_);

            /**
            * Propagates the change in widget's property down to the next childs
            * @param [input] Widget:: * poSetter_. Setter method for the respective property.
            * @param [input] bool enVariable. New value for the property.
            * @return void
            */
            template <typename T, void (Widget:: * poSetter_)(T)>
            void vPropagate(T enVariable);

            /**
            * Propagates the function down to the next childs
            * @param [input] Widget:: * poSetter_. Setter method for the respective property.
            * @return void
            */
            template <void (Widget:: * poSetter_)(void)>
            void vPropagateFunction(void);

#ifndef ART_UNIT_TEST
        private:
#endif

            /*
            * Checks if widget is its own Painter
            * Setting as self painter is done using widget type
            * @param [input] void
            * @return boolean default false, overridable
            */
            virtual bool boIsSelfPainter(void) const;

            /*========= Getters/Setters for internal propagation helper variables =========*/

            /**
            * Getter for the propagation helper variable for Visibility
            * @param [input] void
            * @return bool.
            */
            bool boGetCummulatedParentVisible( void ) const;

            /**
            * Getter for the propagation helper variable for Enable
            * @param [input] void
            * @return bool.
            */
            bool boGetCummulatedParentEnable( void ) const;

            /**
            * Getter for the propagation helper variable for DoUpdate
            * @param [input] void
            * @return bool.
            */
            bool boGetCummulatedParentDoUpdate( void ) const;

            /**
            * Getter for the propagation helper variable for Focused
            * @param [input] void
            * @return bool.
            */
            bool boGetCummulatedParentFocused( void ) const;

            /**
            * Setter for the CummulatedParentVisible property. This function can be overridden in derived classes.
            * This function will be called by its parent to inform about parent's visibility.
            * 1. Updates flag (if changed)
            * 2. Propagate visible to children (if Visible is set)
            * 3. Trigger APIM (if both Visible and CummulatedParentVisible set)
            * 4. Update associated window visibility and invalidate
            * @param [input] bool boCummulatedParentVisible_ . Set widget's parent visibility to be true if this variable is true. Otherwise, set to false.
            * @return void
            */
            void vSetCummulatedParentVisible( const bool boCummulatedParentVisible_ );

            /**
            * Setter for the CummulatedParentEnable property. This function can be overridden in derived classes.
            * This function will be called by its parent to inform about parent's enable.
            * @param [input] bool boCummulatedParentEnable_ . Set widget's parent enable to be true if this variable is true. Otherwise, set to false.
            * @return void
            */
            void vSetCummulatedParentEnable( const bool boCummulatedParentEnable_ );

            /**
            * Setter for the Parent Focused property. This function can be overridden by derived classes
            * @param [input] bool boCummulatedParentFocused_. Set parent widget to be focused if this variable is true. Otherwise, set parent widget to be not focused.
            * @return void
            */
            void vSetCummulatedParentFocused( const bool boCummulatedParentFocused_ );

            /**
            * Setter for the CummulatedParentDoUpdate property. This function can be overridden in derived classes.
            * This function will be called by its parent to inform about parent's do update
            * @param [input] bool boCummulatedParentDoUpdate_ . Set widget's parent doupdate to be true if this variable is true. Otherwise, set to false.
            * @return void
            */
            void vSetCummulatedParentDoUpdate( const bool boCummulatedParentDoUpdate_ );

            /**
            * Build Setter for the CummulatedParentDoUpdate property.
            * Only sets the CummulatedParentDoUpdate flags.
            * @param [input] bool boCummulatedParentDoUpdate_. If true, set flag CummulatedParentDoUpdate to 1, Otherwise, set it to 0.
            * @return void
            */
            void vSetCummulatedParentDoUpdateDontPropagate( const bool boCummulatedParentDoUpdate_ );

            /**
            * Build Setter for the CummulatedParentFocused property.
            * Only sets the CummulatedParentFocused flags.
            * @param [input] bool boCummulatedParentFocused_. If true, set flag CummulatedParentFocused to 1, Otherwise, set it to 0.
            * @return void
            */
            void vSetCummulatedParentFocusedDontPropagate( const bool boCummulatedParentFocused_ );

            /**
            * Build Setter for the CummulatedParentEnable property.
            * Only sets the CummulatedParentEnable flags.
            * @param [input] bool boCummulatedParentEnable_. If true, set flag CummulatedParentEnable to 1, Otherwise, set it to 0.
            * @return void
            */
            void vSetCummulatedParentEnableDontPropagate (const bool boCummulatedParentEnable_ );

            /**
            * Build Setter for the CummulatedParentVisible property.
            * Only sets the CummulatedParentVisible flags.
            * @param [input] bool boCummulatedParentVisible_ . If true, set flag CummulatedParentVisible to 1, Otherwise, set it to 0.
            * @return void
            */
            void vSetCummulatedParentVisibleDontPropagate ( const bool boCummulatedParentVisible_ );

            /*====================== Property change notification helpers ========================*/

            /**
            * A non-virtual wrapper for an overidable handler called by setters if there is a change in widget's property: PosX
            * Calls the actual overridable handler.
            * @param void.
            * @return void.
            */
            void OnChangePosXHelper (void);

            /**
            * A non-virtual wrapper for an overidable handler called by setters if there is a change in widget's property: PosY
            * Calls the actual overridable handler.
            * @param void.
            * @return void.
            */
            void OnChangePosYHelper (void);

            /**
            * A non-virtual wrapper for an overidable handler called by setters if there is a change in widget's property: PosZ
            * Calls the actual overridable handler.
            * @param void.
            * @return void.
            */
            void OnChangePosZHelper (void);

            /**
            * A non-virtual wrapper for an overidable handler called by setters if there is a change in widget's property: Width
            * Calls the actual overridable handler.
            * @param void.
            * @return void.
            */
            void OnChangeWidthHelper (void);

            /**
            * A non-virtual wrapper for an overidable handler called by setters if there is a change in widget's property: Height
            * Calls the actual overridable handler.
            * @param void.
            * @return void.
            */
            void OnChangeHeightHelper (void);

            /**
            * A non-virtual wrapper for an overidable handler called by setters if there is a change in widget's property: Visible
            * Calls the actual overridable handler.
            * @param void.
            * @return void.
            */
            void OnChangeVisibilityHelper (void);

            /**
            * A non-virtual wrapper for an overidable handler called by setters if there is a change in widget's property: Transparency
            * Calls the actual overridable handler.
            * @param void.
            * @return void.
            */
            void OnChangeTransparencyHelper (void);

            /**
            * A non-virtual wrapper for an overidable handler called by setters if there is a change in widget's property: Focused
            * Calls the actual overridable handler.
            * @param void.
            * @return void.
            */
            void OnChangeFocusedHelper (void);

            /**
            * A non-virtual wrapper for an overidable handler called by setters if there is a change in widget's property: Focusable
            * Calls the actual overridable handler.
            * @param void.
            * @return void.
            */
            void OnChangeFocusableHelper (void);

            /**
            * A non-virtual wrapper for an overidable handler called by setters if there is a change in widget's property: Enabled
            * Calls the actual overridable handler.
            * @param void.
            * @return void.
            */
            void OnChangeEnableHelper (void);

            /**
            * A non-virtual wrapper for an overidable handler called by setters if there is a change in widget's property: DoUpdate
            * Calls the actual overridable handler.
            * @param void.
            * @return void.
            */
            void OnChangeDoUpdateHelper(void);

            /**
            * To be called by widgets upon a change that needs to be synchronized with other properties/ states,
            * when the widget is in a stable, accessible state.
            * @param void.
            * @return void.
            */
            virtual void vRequestWidgetRefresh();

            /**
            * Handler for synchronizing the widget's property/ state changes.
            * To be overridden for specific implementation.
            * @param void.
            * @return void.
            */
            virtual void vRefreshWidget(bool boFirstRefresh = false);

            /*====================== Property change: invalidation helpers ========================
            * overridable handlers for special widget invalidation
            * separated from public OnChange handlers to ensure separate handling
            */

            /**
            * Handler for Widget Invalidation upon PosXChange
            * @param void.
            * @return void.
            */
            virtual void WidgetInvalidationPosXChange(void);

            /**
            * Handler for Widget Invalidation upon PosYChange
            * @param void.
            * @return void.
            */
            virtual void WidgetInvalidationPosYChange(void);

            /**
            * Handler for Widget Invalidation upon PosZChange
            * @param void.
            * @return void.
            */
            virtual void WidgetInvalidationPosZChange(void);

            /**
            * Handler for Widget Invalidation upon WidthChange
            * @param void.
            * @return void.
            */
            virtual void WidgetInvalidationWidthChange(void);

            /**
            * Handler for Widget Invalidation upon HeightChange
            * @param void.
            * @return void.
            */
            virtual void WidgetInvalidationHeightChange(void);


            /*=========================== Data members ===============================*/

            /**
            * Index in Widget-Helper array
            */
            uint16 u16WidgetHelperIndex;

            /**
            * ID of widget's final-hook method
            */
            uint16 u16FinalHookID;

#if WFC_STORE_WIDGET_ID == 1

            /**
            * Widget's WRS-generated ID
            */
            uint16 u16WidgetID;

#endif // WFC_STORE_WIDGET_ID

#if WFC_DEBUG == On

            /**
            * Index of widget in Widget Descriptor array
            * For debug purposes only. Not available in final-release build, and not to be used inside code.
            */
            uint16 u16WidgetDescriptorIndex;

            /**
            * Static registry of alive widgets
            */
            static std::map <uint16, Widget *> oRegistry;

#endif // WFC_DEBUG = On

            /**
            * The attributes of Widgets stored in bitfields Flags
            */
            struct stFlags
            {
                /* Default Constructor with initializer list */
                stFlags();

                uint16 State : 3; // state of widget
                uint16 HasFirstTreeBuildDone : 1; // widget has received treebuilddone notification
                uint16 CommonWidget : 1; // widget uses common widget memory pool
                uint16 CummulatedParentDoUpdate : 1; // base property
                uint16 DoUpdate : 1; // base property
                uint16 CummulatedParentEnable : 1; // base property
                uint16 Enable : 1; // base property
                uint16 CummulatedParentVisible : 1; // base property
                uint16 Visible : 1; // base property
                uint16 CummulatedParentFocused : 1; // base property
                uint16 Focused : 1; // base property
                uint16 Focusable : 1; // base property
                uint16 Shared : 1; // common widget shared between two active scenes in transition controller
                uint16 IsAnimationRunning : 1; // animation is currently running

            } Flags;

            /**
            * Array of pointers to various property-change-notification handler methods
            */
            static void ( Widget:: * const ChangeHandlerArray [] ) (void) ;

            /*=========================== Prohibited methods ===============================*/

            /**
            * Default constructor.
            * Intentionally made private and not implemented to prohibit usage
            */
            Widget(void);

            /**
            * Copy constructor.
            * Intentionally made private and not implemented to prohibit usage (noncopyable stereotype)
            */
            Widget(const Widget&);

            /**
            * Assignment operator.
            * Intentionally made private and not implemented to prohibit usage (noncopyable stereotype)
            */
            Widget& operator= (const Widget&);

        } ; /* Class Widget */

    } /* WFC */

} /* HMI */

#if HMI_ENABLE_INLINE == On
#include "WFC_Widget_i.hpp"
#endif

#endif /* WFC_WIDGET_H */

